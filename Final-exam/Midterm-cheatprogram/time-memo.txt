スタック = おぼんの積み重ね

PUSH 先頭(上)から入れる
POP 先頭(上)から消す

※最後の画像みる


キュー = 右左がら空き

Dequeue 先頭(左)から消す
Enqueue 後ろ(右)から入れる

※両端キューというのもある


## 計算量
O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(C^n)
* 計算時間が複数の項の和になるとき、最も早く増加する項のみ残す。
* 計算時間が定数倍されても、オーダーは変わらない。

liner_search（線形探索）の計算量:O(n)
binary_search（二分探索）の計算量:O(logn)

マージソートの計算量
平均時間計算量:O(nlogn)
最悪時間計算量:O(nlogn)

選択ソートの計算量
平均時間計算量:O(n^2)
最悪時間計算量:O(n^2)

クイックソートの計算量
平均時間計算量:O(n^2)
最悪時間計算量:O(nlogn)

----------------
線形探索→O(n)
二分探索→O(logn)
Pythonのソート→O(nlogn)
選択ソート→O(n^2)
バブルソート→O(n^2)
挿入ソート→O(n^2)
クイックソート平均→O(nlogn)
クイックソート最悪→O(n^2)
マージソート→O(nlogn)
配列を用いたリストi番目の要素の読み書き→O(1)
配列を用いたリストの末尾への要素の追加と削除→O(1)
配列を用いたリストの任意の場所への要素の追加と削除→O(n)
リンクリストのi番目の要素の読み書き→O(n)
リンクリストの任意の場所への追加末尾からの要素の削除→O(1)
↑追加や削除の対象とするノードの探索には別途O(n)かかる
スタック操作→O(1)
キュー操作→O(1)
両端キュー→O(1)
リスト→O(n)
集合→O(1)
辞書→O(1)
ハッシュテーブル→O(1)
-----------------------